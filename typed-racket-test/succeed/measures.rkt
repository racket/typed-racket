#lang typed/racket
(provide (all-defined-out))
(define-base-measure-unit m)
(define-base-measure-unit s)
(define-measure-unit m/s (u* m (u^ s -1)))
(define-type Real-Meters (Measure Real m))
(define-type Real-Seconds (Measure Real s))
(define-type Real-Meters/Second (Measure Real m/s))
(define x (measure 5 m))
(define t (measure 2 s))
(: mm/ : (All (u5 u6)
            (-> (Measure Real u5)
                (Measure Real u6)
                (Measure Real (u* u5 (u^ u6 -1))))))
(define (mm/ x t)
  (measure (ann ((ann / [Real Real -> Real]) (ann x Real) (ann t Real)) Real) (u* u5 (u^ u6 -1))))
;(: f : Real-Meters Real-Seconds -> Real-Meters/Second)
;(define (f x t)
;  (mm/ x t))
;(f x t)
;(define zero (m+))
;(define one (m*))
;(define x* (m* x))
;(define x*t (m* x t))
;(define x/t (m/ x t))
;(define 2x/t (m+ (f x t) x/t))
;(: g : (All (u) (Measure Real u) -> (Measure Real u)))
;(define (g m)
;  (m* (measure 2 (u*)) m))
;(define 10m (g (measure 5 m)))
;(ann 10m Real-Meters)
