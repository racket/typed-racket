#lang typed/racket/base
(provide (all-defined-out))
(define-base-measure-unit m)
(define-base-measure-unit s)
(define-measure-unit m/s (u* m (u^ s -1)))
(define-type Real-Meters (Measure Real m))
(define-type Real-Seconds (Measure Real s))
(define-type Real-Meters/Second (Measure Real m/s))
(define x (measure 5 m))
(define t (measure 2 s))
(: f : Real-Meters Real-Seconds -> Real-Meters/Second)
(define (f x t)
  (m/ x t))
(f x t)
(define zero (m+))
(define one (m*))
(define x* (m* x))
(define x*t (m* x t))
(define x/t (m/ x t))
(define 2x/t (m+ (f x t) x/t))
(: g : (All (u) (Measure Real u) -> (Measure Real u)))
(define (g m)
  (m* (measure 2 (u*)) m))
(define 10m (g (measure 5 m)))
(ann 10m Real-Meters)
(: m:/ : (All (a b) (Measure Real a) (Measure Real b) -> (Measure Real (u* a (u^ b -1)))))
(define (m:/ m1 m2)
  (m/ m1 m2))
(define x/t2 (m:/ x t))
(ann x/t2 Real-Meters/Second)
